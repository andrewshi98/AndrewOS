{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"n",
				"n"
			],
			[
				"status",
				"status_indicator"
			],
			[
				"U",
				"UINT8\t(efiprot.h)"
			],
			[
				"EFI_S",
				"EFI_SUCCESS"
			],
			[
				"Res",
				"Reserved\t(efiprot.h)"
			],
			[
				"addr",
				"addr"
			],
			[
				"Frame",
				"FrameBufferSize"
			],
			[
				"memory",
				"memory_descriptor"
			],
			[
				"mem",
				"mem_map"
			],
			[
				"des",
				"descriptor_version"
			],
			[
				"desc",
				"descriptor_size"
			],
			[
				"size",
				"FrameBufferSize\tint FrameBufferSize"
			],
			[
				"uint",
				"uint32_t\t(efibind.h)"
			],
			[
				"Pixel",
				"PixelFormat"
			],
			[
				"Framebuffer",
				"FrameBufferSize\tint FrameBufferSize"
			],
			[
				"format",
				"PixelFormat\tEFI_GRAPHICS_PIXEL_FORMAT PixelFormat"
			],
			[
				"pixel",
				"PixelFormat\tEFI_GRAPHICS_PIXEL_FORMAT PixelFormat"
			],
			[
				"EFI_GRAPHICS_OUTPUT_IN",
				"EFI_GRAPHICS_OUTPUT_MODE_INFORMATION\t(graphics.c)"
			],
			[
				"mode",
				"Mode\tUINT32 * Mode"
			],
			[
				"H",
				"HorizontalResolution\tint HorizontalResolution"
			],
			[
				"DESIRED",
				"DESIRED_HORIZONTAL_RESOLUTION\t(kernel.h)"
			],
			[
				"Pi",
				"PixelFormat\tEFI_GRAPHICS_PIXEL_FORMAT PixelFormat"
			],
			[
				"Red",
				"PixelRedGreenBlueReserved8BitPerColor\tEFI_GRAPHICS_PIXEL_FORMAT PixelRedGreenBlueReserved8BitPerColor"
			],
			[
				"PixelRed",
				"PixelRedGreenBlueReserved8BitPerColor\tEFI_GRAPHICS_PIXEL_FORMAT PixelRedGreenBlueReserved8BitPerColor"
			],
			[
				"Ver",
				"VerticalResolution\tint VerticalResolution"
			],
			[
				"graph",
				"graphics\t(kernel.h)"
			],
			[
				"graphic",
				"graphic_protocol_id"
			],
			[
				"graphics",
				"graphics_instance"
			],
			[
				"Initiali",
				"InitializeLock\t(efilib.h)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/ashi/Documents/AndrewOS/makefile",
			"settings":
			{
				"buffer_size": 1229,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ashi/Documents/AndrewOS/init/main.c",
			"settings":
			{
				"buffer_size": 2414,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ashi/Documents/AndrewOS/init/graphics.c",
			"settings":
			{
				"buffer_size": 4675,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ashi/Documents/AndrewOS/include/kernel.h",
			"settings":
			{
				"buffer_size": 1037,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/local/include/efi/efierr.h",
			"settings":
			{
				"buffer_size": 2111,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/local/include/efi/efiprot.h",
			"settings":
			{
				"buffer_size": 44030,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/local/include/efi/efiapi.h",
			"settings":
			{
				"buffer_size": 24922,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/local/include/efi/x86_64/efibind.h",
			"settings":
			{
				"buffer_size": 13434,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ashi/Documents/AndrewOS/.gitignore",
			"settings":
			{
				"buffer_size": 29,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nEasyClangComplete\n-----------------\n\n  A plugin for easy to use clang-based completions::\n  \n      ‚ïî‚ïê‚ïó‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚î¨ ‚î¨  ‚ïî‚ïê‚ïó‚î¨  ‚îå‚îÄ‚îê‚îå‚îê‚îå‚îå‚îÄ‚îê  ‚ïî‚ïê‚ïó‚îå‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îê‚î¨  ‚îå‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îê\n      ‚ïë‚ï£ ‚îú‚îÄ‚î§‚îî‚îÄ‚îê‚îî‚î¨‚îò  ‚ïë  ‚îÇ  ‚îú‚îÄ‚î§‚îÇ‚îÇ‚îÇ‚îÇ ‚î¨  ‚ïë  ‚îÇ ‚îÇ‚îÇ‚îÇ‚îÇ‚îú‚îÄ‚îò‚îÇ  ‚îú‚î§  ‚îÇ ‚îú‚î§\n      ‚ïö‚ïê‚ïù‚î¥ ‚î¥‚îî‚îÄ‚îò ‚î¥   ‚ïö‚ïê‚ïù‚î¥‚îÄ‚îò‚î¥ ‚î¥‚îò‚îî‚îò‚îî‚îÄ‚îò  ‚ïö‚ïê‚ïù‚îî‚îÄ‚îò‚î¥ ‚î¥‚î¥  ‚î¥‚îÄ‚îò‚îî‚îÄ‚îò ‚î¥ ‚îî‚îÄ‚îò\n  \n  Let't get started!\n  ==================\n  \n  You're just two simple steps away!\n  \n  1. Install clang\n  ----------------\n  \n  - **Ubuntu**        : ``sudo apt-get install clang``\n  - **OSX**           : ships `clang` by default. You are all set!\n  - **Windows**       : install the latest release from clang website.\n  - **Other Systems** : use your package manager or install from clang website.\n  - clang website: http://llvm.org/releases/download.html\n  \n  2. Configure your includes\n  --------------------------\n  \n  Using CMake?\n  ~~~~~~~~~~~~\n  \n  Plugin will run cmake on a proper ``CMakeLists.txt`` in your project folder and\n  will use information from it to complete your code out of the box.\n  \n  Have a compilation database?\n  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \n  Plugin will search for a compilation database ``compile_commands.json`` in the\n  project folder and will load it to complete your code. If you want to specify a\n  custom path to a comilation database you can do it in settings::\n  \n      \"flags_sources\": [\n          {\"file\": \"compile_commands.json\", \"search_in\": \"<YOUR_PATH>\"},\n      ]\n  \n  None of the above?\n  ~~~~~~~~~~~~~~~~~~\n  \n  You will need a little bit of manual setup for now. Clang will automatically\n  search for headers in the folder that contains the file you are working on and\n  its parent. If you have a more sophisticated project you will need to help clang\n  just a little bit. There are three ways to do it.\n  \n  Pick **ANY** of the following:\n  \n  - Set include dirs in ``\"common_flags\"`` setting in ``User Settings``.\n  - Override ``\"common_flags\"`` setting in your project file, i.e. one that has\n    extension: ``*.sublime-project``. Just define the same setting in project\n    specific settings with either one of two prefixes: ``\"ecc_\"`` or\n    ``\"easy_clang_complete_\"`` to override a corresponding setting in your user\n    settings. See the project file in this repo for a working example. Minimal\n    example for clarity::\n  \n      {\n        \"settings\":\n        {\n          \"ecc_common_flags\": [\"-Isrc\", \"-I/usr/include\"],\n          \"easy_clang_complete_verbose\": true\n        }\n      }\n  \n  - It is recommended to use one of the above, but if you already have a file with\n    flags, you can add ``.clang_complete`` file to the root of your project\n    folder. This file adds additional flags to the ones defined with in\n    ``\"common_flags\"``. Example::\n  \n      -Isrc\n      -I/usr/include\n  \n  That's it! You're ready to use the plugin!\n  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \n  More info here\n  ~~~~~~~~~~~~~~\n  \n  Get more info in a readme:\n  https://github.com/niosus/EasyClangComplete/blob/master/README.md\n  \n  Please see the default settings ``EasyClangComplete.sublime-settings``\n  shipped with the plugin for explanations and sane default values.\n  \n  Thanks!\n  =======\n  \n  üíú this plugin? Consider buying me a üçµ\n  https://github.com/niosus/EasyClangComplete#support-it\n",
			"settings":
			{
				"buffer_size": 3276,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 336.0,
		"last_filter": "packa",
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"sublimecode",
				"SublimeCodeIntel: Reset"
			],
			[
				"clang",
				"EasyClangComplete: Settings"
			],
			[
				"pACK",
				"Package Control: Enable Package"
			],
			[
				"package control",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"sublimecodeintel",
				"SublimeCodeIntel: Reset"
			],
			[
				"disable ",
				"Package Control: Disable Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			]
		],
		"width": 436.0
	},
	"console":
	{
		"height": 328.0,
		"history":
		[
			"echo nice",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"a",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"clear",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/ashi/Documents/AndrewOS"
	],
	"file_history":
	[
		"/home/ashi/Documents/AndrewOS/include/kernel.h",
		"/home/ashi/Documents/AndrewOS/init/graphics.c",
		"/usr/local/include/efi/efidef.h",
		"/home/ashi/Documents/AndrewOS/Debug/main.o",
		"/usr/local/include/efi/x86_64/efibind.h",
		"/home/ashi/Documents/AndrewOS/main.c",
		"/usr/local/include/efi/efilib.h",
		"/home/ashi/Downloads/gnu-efi-3.0.8/x86_64/lib/libefi.a",
		"/usr/local/include/efi/efi.h",
		"/usr/local/include/efi/efierr.h"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"GProtocol",
			"gprotocol",
			"cflags",
			"cc",
			"$(TARGET)",
			";\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/ashi/Documents/AndrewOS/makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1229,
						"regions":
						{
						},
						"selection":
						[
							[
								1178,
								1178
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 541.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/ashi/Documents/AndrewOS/init/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2414,
						"regions":
						{
						},
						"selection":
						[
							[
								1847,
								1847
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 48.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/ashi/Documents/AndrewOS/init/graphics.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4675,
						"regions":
						{
						},
						"selection":
						[
							[
								2869,
								2869
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1184.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/ashi/Documents/AndrewOS/include/kernel.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1037,
						"regions":
						{
						},
						"selection":
						[
							[
								797,
								797
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 481.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/usr/local/include/efi/efierr.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2111,
						"regions":
						{
						},
						"selection":
						[
							[
								283,
								283
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 238.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/usr/local/include/efi/efiprot.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44030,
						"regions":
						{
						},
						"selection":
						[
							[
								24282,
								24308
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13398.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/usr/local/include/efi/efiapi.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24922,
						"regions":
						{
						},
						"selection":
						[
							[
								23054,
								23054
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13590.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/usr/local/include/efi/x86_64/efibind.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13434,
						"regions":
						{
						},
						"selection":
						[
							[
								9235,
								9235
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4390.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/ashi/Documents/AndrewOS/.gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29,
						"regions":
						{
						},
						"selection":
						[
							[
								22,
								22
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3276,
						"regions":
						{
						},
						"selection":
						[
							[
								1698,
								1698
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 384.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 108.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "AndrewOS.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"efi/efidef.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
